/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import java.io.*;
import java.net.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class App {

    public static void main(String[] args) {

        DiscoveryManager DM = new DiscoveryManager(Module.STALKER);
        int macID = NetworkUtils.getMacID();
        //System.out.println("" + macID);

        CommsHandler commLink = new CommsHandler();
        //initialize socket and input stream
        Socket socket = null;
        ServerSocket server = null;
        // we can change this later to increase or decrease
        ExecutorService executorService = Executors.newFixedThreadPool(10);
        try {
            //initializing harm server  // add a modifier from the args
            //currently only supports modifiers 0 - 4 SOOOOORRy
            //in the future the port will stay constant and IP will change
            server = new ServerSocket(22222);

        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("Waiting...");

        // will keep on listening for requests from STALKERs
        while (true) {
            try {
                socket = server.accept();
                System.out.println("Accepted connection : " + socket);
                //get packet from the link
                TcpPacket packet = commLink.receivePacket(socket);
                System.out.println(socket.isClosed());
                Handler h = new Handler(socket, packet, macID);
                h.run();
                // creating a runnable task for each request from the same socket connection
                //not working right now
                //executorService.execute();

            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    // waiting until all thread tasks are done before closing the resources
                    awaitTerminationAfterShutdown(executorService);
                } catch (Exception i) {
                    i.printStackTrace();
                }
            }
        }
    }

    /**
     * Method to wait until all threads are done
     * @param threadPool
     */
    public static void awaitTerminationAfterShutdown(ExecutorService threadPool) {
        threadPool.shutdown();
        try {
            if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) {
                threadPool.shutdownNow();
            }
        } catch (InterruptedException ex) {
            threadPool.shutdownNow();
            Thread.currentThread().interrupt();
        }

    }
}
