/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;
import java.io.*;
import java.util.*;
import org.apache.commons.io.FileUtils;

public class FileChunker {
    private String greet;
    private boolean debug = true;

    //hardcoded test variables
    String chunkDir = "chunks/chunked/";
    int chunkCount = 3;
    List<String> toChunk = new ArrayList<>(
            Arrays.asList("chunks/test_files/000_mp4_test.mp4",
                    "chunks/test_files/001_jpg_test.jpg",
                    "chunks/test_files/002_png_test.png",
                    "chunks/test_files/003_txt_test.txt",
                    "chunks/test_files/004_mov_test.mov",
                    "chunks/test_files/005_zip_test.zip",
                    "chunks/test_files/006_rar_test.rar",
                    "chunks/test_files/007_docx_test.docx",
                    "chunks/test_files/008_pdf_test.pdf"));
    List<String> chunked = new ArrayList<>();


    public FileChunker() {
        greet = "hello";
    }

    public void test()
    {
        cleanChunks();
        System.out.println(toChunk.get(0).toString());
        List<String> chunks = chunkFile(toChunk.get(3));
        chunks.forEach((c) -> System.out.println(c));
    }

    //chunk a file into ideally a number determined by some predetermined policy
    //returns a list of the chunk paths
    public List<String> chunkFile(String filepath){
        File file = new File(filepath);
        if (debug) System.out.println("bytes: " + file.length());

        List<String> chunkRecord = new ArrayList();
        //the chunker should maybe check some sort of chunk policy policy
        //Policy p = checkPolicy()
        //Policy may have: chunk division number, maximum chunk size, ???

        //split into n chunks
        long chunkSize = file.length()/chunkCount;
        if(debug) System.out.println("Chunksize: " + chunkSize);
        long bytesLeft = file.length();
        for (int i = 0; i < chunkCount - 1; i++){
            System.out.println("i: " + i);
            if(debug) System.out.println(i + " bytes left: " + bytesLeft);
            String record = newChunk(file, chunkSize * i, chunkSize , i);
            bytesLeft = bytesLeft - chunkSize;
            chunkRecord.add(record);
        }
        String record = newChunk(file, chunkSize * (chunkCount - 1), chunkSize, chunkCount);
        chunkRecord.add(record);
        return(chunkRecord);
    }


    public String newChunk(File f, long start, long num_bytes, int cnum) {
        byte[] bytes = new byte[(int)num_bytes];
        int len = (int)f.length();
        String chunkName =  chunkDir + "c" + Integer.toString(cnum) + ".chunk";
        String chunk_prefix = f.toString().substring(0, f.toString().lastIndexOf('.'));
        //if (start >= num_bytes) return null;
        InputStream in;
        try{
            in = new FileInputStream(f);
            long offset = 0;
            in.skip(start);
            //read the bytes from the file
            while (offset < num_bytes) {
                int tmp = in.read(bytes, 0, (int)num_bytes);
                offset += tmp;
            }
            System.out.println("offset: " + offset);
            in.close();
            //write bytes to new file
            FileUtils.writeByteArrayToFile(new File(chunkName), bytes);
        }
        catch (FileNotFoundException e){
            e.printStackTrace();
            System.out.println("ASS");
            return null;
        }
        catch (IOException e) {
            e.printStackTrace();
            System.out.println("FUCK");
            return(null);
        }
        return(chunkName);
    }


    //prints contents of a text file
    public void printFileContents(String filepath) {
        try (BufferedReader br = new BufferedReader(new FileReader(filepath))) {
            String line = null;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }

    //get the working directory
    public void printWorkingDir(){
        System.out.println("Working Directory = " +
                System.getProperty("user.dir"));
    }

    //purges chunk directory of
    public void cleanChunks() {
        File folder = new File(chunkDir);
        File[] flist = folder.listFiles();
        for (int i = 0; i < listOfFiles.length; i++) {
            flist[i].delete();
        }
    }


}
