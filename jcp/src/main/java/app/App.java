/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import org.apache.commons.io.FilenameUtils;

import javax.swing.*;
import javax.swing.filechooser.FileSystemView;
import java.io.*;
import java.net.Socket;
import java.net.SocketException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;
import java.awt.*;

public class App {

    // to capture total disk space in the system and will be updated with each health check
    static JFrame mainFrame = new JFrame("KRATOS");
    static JList listOfFiles = new JList();
    static JTextArea consoleOutput = new JTextArea();
    static DefaultListModel listModel = new DefaultListModel();
    static RequestSender requestSender;

    //jcp main
    public static void main(String[] args) {
        int test  = 0;

        int discoveryTimeout = 5;

        // to capture total disk space in the system and will be updated with each health check
        // AtomicLong is already synchronized
        // value in bytes
        AtomicLong totalDiskSpace = new AtomicLong(0);



        System.out.println(NetworkUtils.timeStamp(1) + "JCP online");
        //make a discovery manager and start it, prints results to file
        //this beast will be running at all times
        Thread discManager = new Thread(new DiscoveryManager(Module.JCP, discoveryTimeout, false));
        discManager.start();

        System.out.println(NetworkUtils.timeStamp(1) + "Waiting for stalker list to update");
        try{
            Thread.sleep((discoveryTimeout * 1000) + 5000);
        }
        catch (InterruptedException e){
            e.printStackTrace();
        }

        System.out.println(NetworkUtils.timeStamp(1) + "List updated!");
        initJFrame();

        System.out.println("here");


        requestSender = RequestSender.getInstance();



        //starting health checker tasks for each stalker in the stalker list
        Thread healthChecker= new Thread(new HealthChecker(Module.JCP, totalDiskSpace, true));
        healthChecker.start();


        //ip of stalker we'll just use the one at index 1 for now
        while(true){
            try{
                Thread.sleep((10000));
            }
            catch (InterruptedException e){
                e.printStackTrace();
            }
        }
    }
    public static Socket connectToStalker(){
        int port = 11111;
        HashMap<Integer, String> m =  NetworkUtils.mapFromJson(NetworkUtils.fileToString("config/stalkers.list"));
        List<Integer> s_list = NetworkUtils.mapToSList(m);
        String stalkerip =  m.get(s_list.get(1));
        return(requestSender.connect(stalkerip, port));
    }
//
//    //load a config (stalker ip) from file while we get network discovery working
    public static void retrieveFiles() {

        Socket connection = connectToStalker();
        //uncomment this:
        listModel.clear();
        List<String> fileList = requestSender.getFileList();
        for (int i=0; i < fileList.size(); i++) {
            listModel.addElement(fileList.get(i));
        }
        //remove this:
        listOfFiles.setModel(listModel);
        consoleOutput.append("Listed files.\n");
        System.out.println("Listed files.");
        try{ connection.close();}
        catch(IOException e){ e.printStackTrace();}
    }

    public static void chooseFile() {
        Socket connection = connectToStalker();
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();

            String name = FilenameUtils.separatorsToUnix(selectedFile.getAbsolutePath());
            System.out.println(name);
            //remove this:
            listModel.addElement(selectedFile.getName());
            //uncomment this:
            requestSender.sendFile(name);
            consoleOutput.append("Uploaded " + selectedFile + "\n");
            System.out.println("Uploaded " + selectedFile);
        }
        try{ connection.close();}
        catch(IOException e){ e.printStackTrace();}
        retrieveFiles();


    }

    public static void deleteFile() {
        Socket connection = connectToStalker();
        int index = listOfFiles.getSelectedIndex();
        Object selectedFilename = listOfFiles.getSelectedValue();
        //remove this:
        listModel.removeElement(selectedFilename);
        //remove this:
        listOfFiles.setModel(listModel);
        //uncomment this:
        requestSender.deleteFile(selectedFilename.toString());
        consoleOutput.append("Deleted " + selectedFilename.toString() + "\n");
        System.out.println("Deleted " + selectedFilename.toString());
        try{ connection.close();}
        catch(IOException e){ e.printStackTrace();}
        retrieveFiles();

    }

    public static void downloadFile() {
        Socket connection = connectToStalker();
        String selectedFilename = listOfFiles.getSelectedValue().toString();
        //remove this?:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = jfc.showOpenDialog(null);
        //
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            //uncomment this:
            requestSender.getFile(selectedFile + "/" + selectedFilename);
            consoleOutput.append("Downloaded " + selectedFilename + " to " + selectedFile + "\n");
            System.out.println("Downloaded " + selectedFilename + " to " + selectedFile);
        }
        try{ connection.close();}
        catch(IOException e){ e.printStackTrace();}
    }

    public static void initJFrame(){
        String request = null;
        String filename = null;

        //set up the gui
		JButton uploadButton = new JButton("Upload");
		JButton listButton = new JButton("List Files");
		JButton downloadButton = new JButton("Download");
		JButton deleteButton = new JButton("Delete");
		JScrollPane scrollableList = new JScrollPane(listOfFiles);
		listOfFiles.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		JScrollPane scrollableConsole = new JScrollPane(consoleOutput);
		consoleOutput.setEditable(false);
		
		//mainFrame.getContentPane().getLayout().setHgap(50);
		//mainFrame.getContentPane().getLayout().setVgap(50);
		
		GridBagConstraints c = new GridBagConstraints();
		
		mainFrame.getContentPane().setLayout(new GridBagLayout());
		
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 0;
		c.weighty = 0;
		c.insets.top = 10;
		c.insets.left = 10;
		c.insets.right = 10;
		c.insets.bottom = 10;
		
		c.gridx = 1;
		c.gridy = 0;
		mainFrame.getContentPane().add(uploadButton, c);
		
		c.gridx = 2;
		c.gridy = 0;
		mainFrame.getContentPane().add(listButton, c);
		
		c.gridx = 1;
		c.gridy = 2;
		mainFrame.getContentPane().add(downloadButton, c);
		
		c.gridx = 2;
		c.gridy = 2;
		mainFrame.getContentPane().add(deleteButton, c);
		
		c.fill = GridBagConstraints.BOTH;
		c.weightx = 0.7;
		c.weighty = 0.7;
		
		c.gridx = 0;
		c.gridy = 0;
		scrollableConsole.setPreferredSize(new Dimension(50, 30));
		mainFrame.getContentPane().add(scrollableConsole, c);
		
		c.weightx = 1;
		c.weighty = 1;
		
		c.gridx = 0;
		c.gridy = 1;
		c.gridwidth = 3;
		scrollableList.setPreferredSize(new Dimension(500, 300));
		mainFrame.getContentPane().add(scrollableList, c);

        //set up listeners
        UploadListener uploadListener = new UploadListener();
        uploadButton.addActionListener(uploadListener);
        ListListener listListener = new ListListener();
        listButton.addActionListener(listListener);
        DownloadListener downloadListener = new DownloadListener();
        downloadButton.addActionListener(downloadListener);
        DeleteListener deleteListener = new DeleteListener();
        deleteButton.addActionListener(deleteListener);

        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		mainFrame.setPreferredSize(new Dimension(500,400));
		mainFrame.pack();
		mainFrame.setVisible(true);

        //bring window to front
        mainFrame.setAlwaysOnTop(true);
        mainFrame.setAlwaysOnTop(false);
    }

}
