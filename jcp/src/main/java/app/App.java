/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.*;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import javax.swing.*;
import javax.swing.filechooser.*;
import java.awt.*;

public class App {
	static JFrame mainFrame = new JFrame("KRATOS");
	static JList listOfFiles = new JList();
	static JTextArea consoleOutput = new JTextArea();
	static DefaultListModel listModel = new DefaultListModel();
	
    //jcp main
    public static void main(String[] args) {
		
		/*
        int test  = 0;


        System.out.println(NetworkUtils.timeStamp(1) + "JCP online");
        //make a discoverymanager and start it, prints results to file
        DiscoveryManager DM = new DiscoveryManager(Module.JCP);
        DM.start();

        //get the stalkers from file
        HashMap<Integer, String> m =  NetworkUtils.mapFromJson(NetworkUtils.fileToString("config/stalkers.list"));
        //get sorted list from targets
        List<Integer> s_list = NetworkUtils.mapToSList(m);

        System.out.println(" Ip ids" + (s_list));
//        if (test == 0){
//            return;
//        }
        for (Integer key : m.keySet()){

        }
        RequestSender requestSender = RequestSender.getInstance();
        //ip of stalker we'll just use the one at index 0 for now
        String i =  m.get(s_list.get(0));
        System.out.println(" dwdwdwdwddwwd" + i.toString());
        String stalkerip =  m.get(s_list.get(1));

        //port to connect to
        int port = 11111;
        Socket socket = requestSender.connect(stalkerip, port);
        //String req = "upload";
		String req = request;
		String file = filename;
        switch (req){
            case("upload"):
                //requestSender.sendFile("temp\\003_txt_test.txt");
				JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
				int returnValue = jfc.showOpenDialog(null);
				if (returnValue == JFileChooser.APPROVE_OPTION) {
					File selectedFile = jfc.getSelectedFile();
					requestSender.sendFile(selectedFile.getAbsolutePath());
				}
				//requestSender.sendFile(file);
                break;
            case("download"):
                //requestSender.getFile("temp\\003_txt_test.txt");
				requestSender.getFile(file);
                break;
        }
        // should close socket from main calling method, otherwise threads giving null pointer exception
        try {
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
		*/
		
		String request = null;
		String filename = null;
		
		//set up the gui
		JButton uploadButton = new JButton("Upload");
		JButton listButton = new JButton("List Files");
		JButton downloadButton = new JButton("Download");
		JButton deleteButton = new JButton("Delete");
		JScrollPane scrollableList = new JScrollPane(listOfFiles);
		listOfFiles.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		JScrollPane scrollableConsole = new JScrollPane(consoleOutput);
		consoleOutput.setEditable(false);
		
		//mainFrame.getContentPane().getLayout().setHgap(50);
		//mainFrame.getContentPane().getLayout().setVgap(50);
		
		GridBagConstraints c = new GridBagConstraints();
		
		mainFrame.getContentPane().setLayout(new GridBagLayout());
		
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 0;
		c.weighty = 0;
		c.insets.top = 10;
		c.insets.left = 10;
		c.insets.right = 10;
		c.insets.bottom = 10;
		
		c.gridx = 1;
		c.gridy = 0;
		mainFrame.getContentPane().add(uploadButton, c);
		
		c.gridx = 2;
		c.gridy = 0;
		mainFrame.getContentPane().add(listButton, c);
		
		c.gridx = 1;
		c.gridy = 2;
		mainFrame.getContentPane().add(downloadButton, c);
		
		c.gridx = 2;
		c.gridy = 2;
		mainFrame.getContentPane().add(deleteButton, c);
		
		c.fill = GridBagConstraints.BOTH;
		c.weightx = 0.7;
		c.weighty = 0.7;
		
		c.gridx = 0;
		c.gridy = 0;
		scrollableConsole.setPreferredSize(new Dimension(50, 30));
		mainFrame.getContentPane().add(scrollableConsole, c);
		
		c.weightx = 1;
		c.weighty = 1;
		
		c.gridx = 0;
		c.gridy = 1;
		c.gridwidth = 3;
		scrollableList.setPreferredSize(new Dimension(500, 300));
		mainFrame.getContentPane().add(scrollableList, c);
		
		//set up listeners
		UploadListener uploadListener = new UploadListener();
		uploadButton.addActionListener(uploadListener);		
		ListListener listListener = new ListListener();
		listButton.addActionListener(listListener);
		DownloadListener downloadListener = new DownloadListener();
		downloadButton.addActionListener(downloadListener);
		DeleteListener deleteListener = new DeleteListener();
		deleteButton.addActionListener(deleteListener);
		
		
		
		
		mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		mainFrame.setPreferredSize(new Dimension(500,400));
		//mainFrame.setResizable(false);
		mainFrame.pack();
		mainFrame.setVisible(true);
		
		//bring window to front
		mainFrame.setAlwaysOnTop(true);
		mainFrame.setAlwaysOnTop(false);
		
    }
	
	public static void retrieveFiles() {
		//uncomment this:
		/*
			listModel.clear();
			List<String> fileList = requestSender.getFileList();
			for (int i=0; i < fileList.size(); i++) {
				listModel.addElement(fileList.get(i);
			}
		*/
		//remove this:
		listOfFiles.setModel(listModel);
		consoleOutput.append("Listed files.\n");
		System.out.println("Listed files.");
	}
	
	public static void chooseFile() {
		JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
		int returnValue = jfc.showOpenDialog(null);
		if (returnValue == JFileChooser.APPROVE_OPTION) {
			File selectedFile = jfc.getSelectedFile();
			//remove this:
			listModel.addElement(selectedFile.getName());
			//uncomment this:
			//requestSender.sendFile(selectedFile.getAbsolutePath());
			consoleOutput.append("Uploaded " + selectedFile + "\n");
			System.out.println("Uploaded " + selectedFile);
		}
		retrieveFiles();
	}
	
	public static void deleteFile() {
		int index = listOfFiles.getSelectedIndex();
		Object selectedFilename = listOfFiles.getSelectedValue();
		//remove this:
		listModel.removeElement(selectedFilename);
		//remove this:
		listOfFiles.setModel(listModel);
		//uncomment this:
		//requestSender.deleteFile(selectedFilename);
		consoleOutput.append("Deleted " + selectedFilename.toString() + "\n");
		System.out.println("Deleted " + selectedFilename.toString());
		retrieveFiles();
	}
	
	public static void downloadFile() {
		String selectedFilename = listOfFiles.getSelectedValue().toString();
		//remove this?:
		JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
		jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnValue = jfc.showOpenDialog(null);
		//
		if (returnValue == JFileChooser.APPROVE_OPTION) {
			File selectedFile = jfc.getSelectedFile();
			//uncomment this:
			//requestSender.getFile(selectedFilename);
			consoleOutput.append("Downloaded " + selectedFilename + " to " + selectedFile + "\n");
			System.out.println("Downloaded " + selectedFilename + " to " + selectedFile);
		}
	}


//
//    //load a config (stalker ip) from file while we get network discovery working

}
